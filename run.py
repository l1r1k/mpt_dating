import asyncio
import logging
import random

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from create_form_handlers import router_create_form

from config import TG_API, async_angine

from queries import DatingDB

from keyboards import menu, yes_or_no_kb, actions, answer_on_action

bot = Bot(TG_API)
dp = Dispatcher()

class FormInAction(StatesGroup):
    form = State()
    action = State()
    message = State()

class Likes(StatesGroup):
    forms = State()
    liked_form = State()
    liked_form_id = State()
    action = State()

@dp.message(CommandStart())
async def start(message: Message):
    tg_user_id = message.from_user.id
    tg_user_full_name = message.from_user.full_name
    tg_user_username = message.from_user.username

    user = await DatingDB.get_user_by_tg_user_id(str(tg_user_id))
    if user:
        form = await DatingDB.get_form_by_id_user(user.id_user)
        if form:
            await message.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {tg_user_full_name}!', reply_markup=menu)
        else:
            await message.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {tg_user_full_name}! –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∞–Ω–∫–µ—Ç—ã —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é! –ü—Ä–æ–ø–∏—à–∏—Ç–µ /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É!')
    else:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {tg_user_full_name}! –°–µ–π—á–∞—Å –∑–∞–ø–∏—à–µ–º —Ç–µ–±—è –≤ —Å–≤–æ—é —Å–∏—Å—Ç–µ–º—É –∏ —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É!')
        await DatingDB.add_user(tg_user_full_name, str(tg_user_id), tg_user_username)
        await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É! –ù–∞–ø–∏—à–∏ /create, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É!')

@dp.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
async def shop_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu)

@dp.message(F.text.in_(['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã üìó','–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëé']))
async def show_forms(message: Message, state: FSMContext):
    await message.answer('–í–æ—Ç –∞–Ω–∫–µ—Ç–∞:', reply_markup=actions)
    forms = await DatingDB.get_forms()

    random_form = random.choice(forms)

    await state.set_state(FormInAction.form)
    await state.update_data(form=random_form)

    file = FSInputFile(random_form.form_media_path)

    caption = f"""
–ò–º—è: {random_form.username_from}
–í–æ–∑—Ä–∞—Å—Ç: {random_form.age_form}
–ì–æ—Ä–æ–¥: {random_form.city_form}
–ü–æ–ª: {'–ñ–µ–Ω—Å–∫–∏–π' if random_form.gender_form else '–ú—É–∂—Å–∫–æ–π'}
–û–ø–∏—Å–∞–Ω–∏–µ:
{random_form.description}
"""    
    if random_form.form_media_path.endswith('.jpg'):
        await message.answer_photo(file, caption=caption,reply_markup=actions)
    else:
        await message.answer_video(file, caption=caption,reply_markup=actions)

@dp.message(F.text.in_(['–õ–∞–π–∫ üëç', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ üíå']))
async def like(message: Message, state: FSMContext):
    await state.set_state(FormInAction.action)
    await state.update_data(action=message.text)
    current_data = await state.get_data()
    
    match (message.text):
        case '–õ–∞–π–∫ üëç':
            await DatingDB.add_like(str(message.from_user.id), current_data['form'].id_form)
            
            form = await DatingDB.get_form_by_id(current_data['form'].id_form)
            user = await DatingDB.get_user_by_id(form.user_id)

            await bot.send_message(user.tg_user_id, '–í—ã –∫–æ–º—É —Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∫–æ—Ä–µ–π!')
            await state.clear()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu)
        case '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ üíå':
            await state.set_state(FormInAction.message)
            await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ')

@dp.message(FormInAction.message)
async def like_with_message(message: Message, state: FSMContext):
    current_data = await state.get_data()
    await state.update_data(message=message.text)
    
    await DatingDB.add_like(str(message.from_user.id), current_data['form'].id_form, message.text)

    user = await DatingDB.get_user_by_id(current_data['form'].user_id)

    await bot.send_message(user.tg_user_id, '–í—ã –∫–æ–º—É —Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∫–æ—Ä–µ–π!')

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=menu)

@dp.message(F.text.in_(['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º—É —è –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è üîé','–ù–µ üëé']))
async def show_liked(message: Message, state: FSMContext):
    await message.answer('–í–æ—Ç –∞–Ω–∫–µ—Ç—ã –∫–æ–º—É –≤—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å: ')

    user = await DatingDB.get_user_by_tg_user_id(str(message.from_user.id))
    form = await DatingDB.get_form_by_id_user(user.id_user)
    likes = await DatingDB.get_form_who_liked_me(form.id_form)
    likes = list(likes)
    if len(likes) < 1:
        await message.answer('–í–∞—Å –ø–æ–∫–∞ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª, –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã', reply_markup=menu)
        return ''
    
    await state.set_state(Likes.liked_form_id)
    await state.update_data(liked_form_id=likes[0].id_liked)

    user_who_liked = await DatingDB.get_user_by_tg_user_id(str(likes[0].tg_user_id))
    form_who_liked = await DatingDB.get_form_by_id_user(user_who_liked.id_user)
    liked_form = await DatingDB.get_form_by_id(form_who_liked.id_form)

    await state.set_state(Likes.liked_form)
    await state.update_data(liked_form=liked_form)

    message_from_liked_person = likes[0].message

    if message.text == '–ù–µ üëé':
        await DatingDB.delete_like_by_id(likes[0].id_liked)
    likes.remove(likes[0])

    await state.set_state(Likes.forms)
    await state.update_data(forms=likes)

    file = FSInputFile(liked_form.form_media_path)

    caption = f"""
–ò–º—è: {liked_form.username_from}
–í–æ–∑—Ä–∞—Å—Ç: {liked_form.age_form}
–ì–æ—Ä–æ–¥: {liked_form.city_form}
–ü–æ–ª: {'–ñ–µ–Ω—Å–∫–∏–π' if liked_form.gender_form else '–ú—É–∂—Å–∫–æ–π'}
–û–ø–∏—Å–∞–Ω–∏–µ:
{liked_form.description}
{f'–ü–∏—Å—å–º–æ: {message_from_liked_person}' if message_from_liked_person else ''}
"""
    
    if liked_form.form_media_path.endswith('.jpg'):
        await message.answer_photo(file, caption=caption,reply_markup=answer_on_action)
    else:
        await message.answer_video(file, caption=caption,reply_markup=answer_on_action)


@dp.message(F.text == '–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ üëç')
async def match(message: Message, state: FSMContext):
    data = await state.get_data()
            
    form = await DatingDB.get_form_by_id(data['liked_form'].id_form)
    user = await DatingDB.get_user_by_id(form.user_id)

    user_liked = await DatingDB.get_user_by_tg_user_id(str(message.from_user.id))

    await bot.send_message(user.tg_user_id, f'–£ –≤–∞—Å –º—ç—Ç—á! –í–æ—Ç —é–∑–µ—Ä–Ω–µ–π–º: @{user_liked.tg_user_tag}')
    await message.answer(f'–£ –≤–∞—Å –º—ç—Ç—á! –í–æ—Ç —Ç–≥ —é–∑–µ—Ä–Ω–µ–π–º @{user.tg_user_tag}', reply_markup=menu)

    await DatingDB.delete_like_by_id(data['liked_form_id'])

    await state.set_state(Likes.forms)
    # data['forms'].remove(data['liked_form'])
    await state.update_data(likes=data['forms'])
        

async def main():
    dp.include_router(router_create_form)
    await dp.start_polling(bot)

if __name__=='__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())